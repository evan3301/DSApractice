Hierarchical node-based data structure


Types of binary trees:
    Full -> each node has either 0 or 2 children
    Degenerate -> each node has only 1 child (right skewed / left skewed)
    Balanced -> left & right subtree of every node is equal

    Special cases:
        Binary search tree -> sorted tree ; each node & child organized least to greatest
        Red Black tree -> self balancing tree via extra bit and left-right rotational functions ; maintains O(n log n)

    Basic functions:
        Insertion
        Removal
        Deletion
        Searching
        Transversal

            Traversal methods:
                Depth-first search (DFS):
                    Preorder -> {root left right repeat}
                    Inorder -> {left root right repeat}
                    Postorder -> {left right root repeat}

                Breadth-first search (BFS):
                    Levelorder -> {level by level , going left to right}

                    Example:

                                1
                             /     \
                            2       3
                          /   \    /  \
                         4     5  6    7

                            Preorder -> 1-2-4-5-3-6-7
                            Inorder -> 4-2-5-1-6-3-7
                            Postorder -> 4-5-2-6-7-3-1

                            Levelorder -> 1-2-3-4-5-6-7

    Special case functions:
        Finding height of tree
        Finding level of tree
        Finding size of tree